#https://github.com/a0x8o/kafka/blob/master/clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java L602

RULE kafka-fetch-session-handle-error
CLASS org.apache.kafka.clients.FetchSessionHandler
METHOD handleError(java.lang.Throwable)
HELPER io.confluent.examples.KafkaFetchSessionHandleErrorHelper
AT EXIT
IF $1 instanceof org.apache.kafka.common.errors.DisconnectException
DO traceStack($1);
ENDRULE


RULE test-with-sample-Application
CLASS JavaTestApplication
METHOD handleException(java.lang.Throwable)
HELPER io.confluent.examples.KafkaFetchSessionHandleErrorHelper
AT EXIT
BIND threadName:String=Thread.currentThread().getName();
IF $1 instanceof RuntimeException
DO traceOpen("log"+threadName,"/tmp/traceException-"+threadName+".txt");
   traceln("log"+threadName,"Exception stack trace:");
   traceStack($1);
   traceClose("log"+threadName);
ENDRULE

RULE print-stack-trace-on-exception
CLASS org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler
METHOD fireCompletion()
AT ENTRY
BIND ex:RuntimeException = $0.e;
     threadName:String=Thread.currentThread().getName();
IF ex != null
DO traceOpen(threadName,"/tmp/traceException-"+threadName+".txt");

   traceln(threadName+, "*****************print-stack-trace-on-exception fired *********************************** ");
   traceln("Exception stack trace:");
   ex.printStackTrace();
   traceStack(ex);
   traceln(threadName, "*****************print-stack-trace-on-exception END *********************************** ");
   traceClose(threadName);
ENDRULE

RULE print-on-Disconnect-Response
CLASS org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient$RequestFutureCompletionHandler
METHOD fireCompletion()
AT ENTRY
BIND r:org.apache.kafka.clients.ClientResponse = $this.response;
     threadName:String=Thread.currentThread().getName();
IF $this.e==null AND r.wasDisconnected()

DO traceOpen(threadName,"/tmp/traceException-"+threadName+".txt");

   traceln(threadName, "*****************Byteman rule print-on-Disconnect-Response fired *********************************** ");
   traceln(threadName,r.toString());
   System.out.println("[BYTEMAN] Calling"+r.toString());
   traceln(threadName, "*****************Byteman rule print-on-Disconnect-Response END *********************************** ");
   traceClose(threadName);
ENDRULE

RULE print-on-Disconnect-response-create
CLASS  org.apache.kafka.clients.ClientResponse
METHOD <init>(org.apache.kafka.common.requests.RequestHeader, org.apache.kafka.clients.RequestCompletionHandler, String, long, long, boolean, org.apache.kafka.common.errors.UnsupportedVersionException, org.apache.kafka.common.errors.AuthenticationException, org.apache.kafka.common.requests.AbstractResponse)
AT ENTRY
BIND threadName:String=Thread.currentThread().getName();
IF $6

DO traceOpen(threadName,"/tmp/traceException-"+threadName+".txt");
   traceln(threadName, "################Byteman rule print-on-Disconnect-response-create fired ####################################### ");
   traceln(threadName, "Caller stack : ");
   traceln(threadName,formatStack());
   traceln(threadName, "*****************Byteman rule print-on-Disconnect-response-create END *********************************** ");
   traceClose(threadName);
   #System.out.println("[BYTEMAN] Calling"+r.toString());
ENDRULE


RULE print-on-Channel-Close
CLASS  org.apache.kafka.common.network.Selector
METHOD doClose( org.apache.kafka.common.network.KafkaChannel, boolean)
AT ENTRY
BIND threadName:String=Thread.currentThread().getName();
IF TRUE

DO traceOpen(threadName,"/tmp/traceException-"+threadName+".txt");

   traceln(threadName, "$$$$$$$$$$$$$$$$$$$$$$$Byteman rule print-on-Channel-Close fired $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ");
   traceln(threadName,"--------------------stack trace channel close----------------------------");
   traceln(threadName,formatStack());
   traceln(threadName, "$$$$$$$$$$$$$$$$$$$$$$$Byteman rule print-on-Channel-Close END $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ");
   traceClose(threadName);
ENDRULE

